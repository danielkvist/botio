// Code generated by protoc-gen-go. DO NOT EDIT.
// source: commands.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Command represents a command's name.
type Command struct {
	Command              string   `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{0}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

// Response represents a commnad's response.
type Response struct {
	Response             string   `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

// BotCommand is a encapsulates a command's name and his
// response.
type BotCommand struct {
	Cmd                  *Command  `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Resp                 *Response `protobuf:"bytes,2,opt,name=resp,proto3" json:"resp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *BotCommand) Reset()         { *m = BotCommand{} }
func (m *BotCommand) String() string { return proto.CompactTextString(m) }
func (*BotCommand) ProtoMessage()    {}
func (*BotCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{2}
}

func (m *BotCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BotCommand.Unmarshal(m, b)
}
func (m *BotCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BotCommand.Marshal(b, m, deterministic)
}
func (m *BotCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotCommand.Merge(m, src)
}
func (m *BotCommand) XXX_Size() int {
	return xxx_messageInfo_BotCommand.Size(m)
}
func (m *BotCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_BotCommand.DiscardUnknown(m)
}

var xxx_messageInfo_BotCommand proto.InternalMessageInfo

func (m *BotCommand) GetCmd() *Command {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *BotCommand) GetResp() *Response {
	if m != nil {
		return m.Resp
	}
	return nil
}

// BotCommands represents a list of BotCommands.
type BotCommands struct {
	Commands             []*BotCommand `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BotCommands) Reset()         { *m = BotCommands{} }
func (m *BotCommands) String() string { return proto.CompactTextString(m) }
func (*BotCommands) ProtoMessage()    {}
func (*BotCommands) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dff099eb2e3dfdb, []int{3}
}

func (m *BotCommands) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BotCommands.Unmarshal(m, b)
}
func (m *BotCommands) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BotCommands.Marshal(b, m, deterministic)
}
func (m *BotCommands) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotCommands.Merge(m, src)
}
func (m *BotCommands) XXX_Size() int {
	return xxx_messageInfo_BotCommands.Size(m)
}
func (m *BotCommands) XXX_DiscardUnknown() {
	xxx_messageInfo_BotCommands.DiscardUnknown(m)
}

var xxx_messageInfo_BotCommands proto.InternalMessageInfo

func (m *BotCommands) GetCommands() []*BotCommand {
	if m != nil {
		return m.Commands
	}
	return nil
}

func init() {
	proto.RegisterType((*Command)(nil), "proto.Command")
	proto.RegisterType((*Response)(nil), "proto.Response")
	proto.RegisterType((*BotCommand)(nil), "proto.BotCommand")
	proto.RegisterType((*BotCommands)(nil), "proto.BotCommands")
}

func init() { proto.RegisterFile("commands.proto", fileDescriptor_0dff099eb2e3dfdb) }

var fileDescriptor_0dff099eb2e3dfdb = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x49, 0x6b, 0x6d, 0x9d, 0xda, 0xaa, 0x03, 0x4a, 0xd8, 0x16, 0x29, 0x5b, 0x90, 0x5a,
	0x30, 0xc1, 0x78, 0x13, 0x2f, 0x56, 0xc5, 0x8b, 0xa7, 0xb4, 0x9e, 0x3c, 0xa5, 0xcd, 0x5a, 0x02,
	0x4d, 0x36, 0x34, 0xab, 0x20, 0xe2, 0xc5, 0x57, 0xf0, 0xb5, 0xbc, 0xf9, 0x0a, 0x3e, 0x88, 0x64,
	0xb3, 0xdb, 0x40, 0x62, 0x3d, 0x78, 0xda, 0x1d, 0xe6, 0x9f, 0x6f, 0xfe, 0xf9, 0xa1, 0x3d, 0xe3,
	0x61, 0xe8, 0x45, 0x7e, 0x62, 0xc5, 0x4b, 0x2e, 0x38, 0xd6, 0xe4, 0x43, 0xba, 0x73, 0xce, 0xe7,
	0x0b, 0x66, 0x7b, 0x71, 0x60, 0x7b, 0x51, 0xc4, 0x85, 0x27, 0x02, 0x1e, 0x29, 0x11, 0xe9, 0xa8,
	0xae, 0xac, 0xa6, 0x4f, 0x8f, 0x36, 0x0b, 0x63, 0xf1, 0x92, 0x35, 0x69, 0x1f, 0xea, 0x57, 0x19,
	0x13, 0x4d, 0xa8, 0x2b, 0xbc, 0x69, 0xf4, 0x8c, 0xc1, 0x96, 0xab, 0x4b, 0x7a, 0x04, 0x0d, 0x97,
	0x25, 0x31, 0x8f, 0x12, 0x86, 0x04, 0x1a, 0x4b, 0xf5, 0x57, 0xb2, 0x55, 0x4d, 0xc7, 0x00, 0x23,
	0x2e, 0x34, 0xaf, 0x07, 0xd5, 0x59, 0x98, 0xb1, 0x9a, 0x4e, 0x3b, 0xdb, 0x67, 0xa9, 0xa6, 0x9b,
	0xb6, 0xb0, 0x0f, 0x1b, 0xe9, 0xac, 0x59, 0x91, 0x92, 0x1d, 0x25, 0xd1, 0xab, 0x5c, 0xd9, 0xa4,
	0x17, 0xd0, 0xcc, 0xa1, 0x09, 0x9e, 0x40, 0x43, 0x87, 0x60, 0x1a, 0xbd, 0xea, 0xa0, 0xe9, 0xec,
	0xa9, 0xb9, 0x5c, 0xe5, 0xae, 0x24, 0xce, 0x67, 0x15, 0x6a, 0x23, 0x2e, 0x02, 0x8e, 0x13, 0x80,
	0x4b, 0xdf, 0xd7, 0xe6, 0xca, 0x43, 0xe4, 0xc0, 0xca, 0x82, 0xb2, 0x74, 0x50, 0xd6, 0x4d, 0x1a,
	0x14, 0xed, 0xbc, 0x7f, 0x7d, 0x7f, 0x54, 0xf6, 0xe9, 0xae, 0xcc, 0xf7, 0xf9, 0xd4, 0xd6, 0xf0,
	0x73, 0x63, 0x88, 0x63, 0x80, 0x5b, 0xb6, 0x3a, 0xb9, 0x70, 0x25, 0x29, 0x6f, 0xa1, 0x54, 0xd2,
	0xba, 0x48, 0x8a, 0x34, 0xfb, 0x55, 0xfd, 0xde, 0x70, 0x02, 0xdb, 0x77, 0x41, 0x92, 0xdf, 0xbc,
	0xc6, 0x19, 0xc1, 0x12, 0x3e, 0xa1, 0xa6, 0xe4, 0x23, 0x96, 0xdc, 0x22, 0x83, 0xd6, 0x7d, 0xec,
	0x7b, 0x82, 0xfd, 0x23, 0x83, 0x63, 0x49, 0xed, 0x3b, 0x87, 0xbf, 0xb8, 0x0e, 0x7d, 0x4b, 0x3b,
	0x4f, 0x13, 0x79, 0x80, 0xd6, 0x35, 0x5b, 0xb0, 0x7c, 0x4d, 0x31, 0x94, 0x75, 0x3b, 0x54, 0x32,
	0xc3, 0x3f, 0x92, 0x99, 0x6e, 0xca, 0x99, 0xb3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xae, 0xc9,
	0x28, 0x70, 0x09, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BotioClient is the client API for Botio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BotioClient interface {
	AddCommand(ctx context.Context, in *BotCommand, opts ...grpc.CallOption) (*empty.Empty, error)
	GetCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*BotCommand, error)
	ListCommands(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BotCommands, error)
	UpdateCommand(ctx context.Context, in *BotCommand, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*empty.Empty, error)
}

type botioClient struct {
	cc *grpc.ClientConn
}

func NewBotioClient(cc *grpc.ClientConn) BotioClient {
	return &botioClient{cc}
}

func (c *botioClient) AddCommand(ctx context.Context, in *BotCommand, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Botio/AddCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botioClient) GetCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*BotCommand, error) {
	out := new(BotCommand)
	err := c.cc.Invoke(ctx, "/proto.Botio/GetCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botioClient) ListCommands(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BotCommands, error) {
	out := new(BotCommands)
	err := c.cc.Invoke(ctx, "/proto.Botio/ListCommands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botioClient) UpdateCommand(ctx context.Context, in *BotCommand, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Botio/UpdateCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botioClient) DeleteCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Botio/DeleteCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotioServer is the server API for Botio service.
type BotioServer interface {
	AddCommand(context.Context, *BotCommand) (*empty.Empty, error)
	GetCommand(context.Context, *Command) (*BotCommand, error)
	ListCommands(context.Context, *empty.Empty) (*BotCommands, error)
	UpdateCommand(context.Context, *BotCommand) (*empty.Empty, error)
	DeleteCommand(context.Context, *Command) (*empty.Empty, error)
}

// UnimplementedBotioServer can be embedded to have forward compatible implementations.
type UnimplementedBotioServer struct {
}

func (*UnimplementedBotioServer) AddCommand(ctx context.Context, req *BotCommand) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommand not implemented")
}
func (*UnimplementedBotioServer) GetCommand(ctx context.Context, req *Command) (*BotCommand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommand not implemented")
}
func (*UnimplementedBotioServer) ListCommands(ctx context.Context, req *empty.Empty) (*BotCommands, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommands not implemented")
}
func (*UnimplementedBotioServer) UpdateCommand(ctx context.Context, req *BotCommand) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommand not implemented")
}
func (*UnimplementedBotioServer) DeleteCommand(ctx context.Context, req *Command) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommand not implemented")
}

func RegisterBotioServer(s *grpc.Server, srv BotioServer) {
	s.RegisterService(&_Botio_serviceDesc, srv)
}

func _Botio_AddCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotioServer).AddCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Botio/AddCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotioServer).AddCommand(ctx, req.(*BotCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Botio_GetCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotioServer).GetCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Botio/GetCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotioServer).GetCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _Botio_ListCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotioServer).ListCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Botio/ListCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotioServer).ListCommands(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Botio_UpdateCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotioServer).UpdateCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Botio/UpdateCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotioServer).UpdateCommand(ctx, req.(*BotCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Botio_DeleteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotioServer).DeleteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Botio/DeleteCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotioServer).DeleteCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

var _Botio_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Botio",
	HandlerType: (*BotioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCommand",
			Handler:    _Botio_AddCommand_Handler,
		},
		{
			MethodName: "GetCommand",
			Handler:    _Botio_GetCommand_Handler,
		},
		{
			MethodName: "ListCommands",
			Handler:    _Botio_ListCommands_Handler,
		},
		{
			MethodName: "UpdateCommand",
			Handler:    _Botio_UpdateCommand_Handler,
		},
		{
			MethodName: "DeleteCommand",
			Handler:    _Botio_DeleteCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commands.proto",
}
